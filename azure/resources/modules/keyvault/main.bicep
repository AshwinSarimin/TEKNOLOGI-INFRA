metadata name = 'Key Vaults'
metadata description = 'This module deploys key Vault(s).'
metadata owner = 'DevOps'

// ================ //
// Parameters       //
// ================ //

@description('Required. Config object that contains the resource definitions')
param config object

@description('Required. Check against already existing resources in the resourcegroup')
param existingResources array

@description('Optional. Location for all resources.')
param location string = resourceGroup().location
  
module keyVault 'modules/keyvault.bicep' = [for (keyvault, index) in config.keyVaults: {
  name: keyvault.name
  params: {
    location: location
    name: keyvault.name
    sku: keyvault.sku
    publicNetworkAccess: !(contains(config.keyvaults[index], 'publicNetworkAccess')) ? 'Enabled' : keyvault.publicNetworkAccess
    alreadyExists: !(contains(existingResources, keyvault.name)) ? false : true
  }
}]

module accessPolicy 'modules/keyvault-policy.bicep' = [for keyvault in config.keyVaults: {
  name: '${keyvault.name}-policy'
  params: {
    keyvaultName: keyvault.name
    managedIdentities: keyvault.managedIdentities
    servicePrincipalId: (contains(config, 'servicePrincipalObjectId')) ? config.servicePrincipalObjectId : ''
    permissionsGet: {
      keys: [
        'get'
        'list'
      ]      
      secrets: [
        'get'
        'list'
      ]
      certificates: [
        'get'
        'getissuers'
        'list'
        'listissuers'
      ]
    }
    permissionsManage: {
      keys: [
        'get'
        'list'
        'create'
        'update'
      ]
      secrets: [
        'get'
        'list'
        'set'
      ]
      certificates: [
        'get'
        'getissuers'
        'list'
        'listissuers'
        'create'
        'update'
      ]
    }    
    permissionsServicePrincipal: {
      secrets: [
        'get'
        'list'
        'set'
      ]
      certificates: [
        'get'
        'getissuers'
        'list'
        'listissuers'
        'create'
        'update'
      ]
    }
  }
  dependsOn: [
    keyVault
  ]
}]

module generateSecrets 'modules/generate-secrets.bicep' = [for (keyvault, index) in config.keyVaults: if(contains(keyvault, 'autoGeneratedSecrets') && !empty(keyvault.managedIdentities)) {
  name: 'generate-secrets-${keyvault.name}'
  params: {
    keyvaultName: keyvault.name
    location: location
    resourceGroupName: resourceGroup().name
    subscription: subscription().subscriptionId
    secretsArray: keyvault.autoGeneratedSecrets
    managedIdentityName: keyvault.managedIdentities[0].name
    managedIdentityResourceGroupName: keyvault.managedIdentities[0].resourceGroupName
  }
}]
