name: Release - Dispatch to main

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        options:
          - prd
          - tst
      tenant:
        type: choice
        required: true
        options:
          - teknologi
          - cloud
      teknologi:
        type: boolean
        required: true
        default: false
      aks-infrastructure:
        type: boolean
        required: true
        default: false
      aks-configuration:
        type: boolean
        required: true
        default: false  
jobs:
  deploy-resources:
    if: inputs.teknologi == true || inputs.aks-infrastructure == true
    uses: ./.github/workflows/release-deployresources.yaml
    with:
      environment: ${{ inputs.environment }}
      tenant: ${{ inputs.tenant }}
      teknologi: ${{ inputs.teknologi }}
      aks: ${{ inputs.aks-infrastructure }}
    secrets: inherit
  get-aks-clusters-to-configure:
    if: inputs.aks-configuration == true
    uses: ./.github/workflows/aks-get-clusters.yaml
    with:
      environment: ${{ inputs.environment }}
      tenant: ${{ inputs.tenant }}
  configure-aks-cluster:
    needs: get-aks-clusters-to-configure
    if: ${{ needs.get-aks-clusters-to-configure.outputs.clusters }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cluster: ${{ fromJson(needs.get-aks-clusters-to-configure.outputs.clusters) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure Login
        if: inputs.tenant == 'teknologi'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.BICEP_GITHUBACTIONS_TEKNOLOGI }}
          enable-AzPSSession: true
      - name: Azure Login
        if: inputs.tenant == 'cloud'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.BICEP_GITHUBACTIONS_CLOUD }}
          enable-AzPSSession: true
      - name: Get AKS context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ matrix.cluster.name }}
          resource-group: ${{ matrix.cluster.resourceGroupName }}
          admin: 'true'
          use-kubelogin: 'false'
      - name: Configure Ingress Nginx
        uses: ./.github/actions/templates/k8s-deploy-nginx-ingress
        id: deploy-nginx-ingress
      - name: Configure Let's Encrypt
        uses: ./.github/actions/templates/k8s-deploy-letsencrypt
        id: deploy-letsencrypt
      - name: Configure ArgoCD - Teknologi
        if: inputs.tenant == 'teknologi'
        uses: ./.github/actions/templates/k8s-deploy-argocd
        id: deploy-argocd-teknologi
        with:
          ingressClass: ${{ matrix.cluster.ingressClass }}
          hostName: ${{ matrix.cluster.argoCd.hostName }}
          tenantId: ${{ needs.get-aks-clusters-to-configure.outputs.tenantId }}
          ServicePrincipalClientId: ${{ matrix.cluster.argoCd.ServicePrincipalClientId }}
          SsoServicePrincipalClientSecret: ${{ secrets.AKS_SSO_TEKNOLOGI }}
          AdminAadGroupId: ${{ matrix.cluster.adminAadGroupId }}
      - name: Configure ArgoCD - Cloud
        if: inputs.tenant == 'cloud'
        uses: ./.github/actions/templates/k8s-deploy-argocd
        id: deploy-argocd-cloud
        with:
          ingressClass: ${{ matrix.cluster.ingressClass }}
          hostName: ${{ matrix.cluster.argoCd.hostName }}
          tenantId: ${{ needs.get-aks-clusters-to-configure.outputs.tenantId }}
          ServicePrincipalClientId: ${{ matrix.cluster.argoCd.ServicePrincipalClientId }}
          SsoServicePrincipalClientSecret: ${{ secrets.AKS_SSO_CLOUD }}
          AdminAadGroupId: ${{ matrix.cluster.adminAadGroupId }}
      - name: Configure Prometheus - Teknologi
        if: inputs.tenant == 'teknologi'
        uses: ./.github/actions/templates/k8s-deploy-prometheus
        id: deploy-prometheus-teknologi
        with:
          ingressClass: ${{ matrix.cluster.ingressClass }}
          hostName: ${{ matrix.cluster.grafana.hostName }}
          tenantId: ${{ needs.get-aks-clusters-to-configure.outputs.tenantId }}
          ServicePrincipalClientId: ${{ matrix.cluster.grafana.ServicePrincipalClientId }}
          SsoServicePrincipalClientSecret: ${{ secrets.AKS_SSO_TEKNOLOGI }}
          AdminAadGroupId: ${{ matrix.cluster.adminAadGroupId }}
      - name: Configure Prometheus - Cloud
        if: inputs.tenant == 'cloud'
        uses: ./.github/actions/templates/k8s-deploy-prometheus
        id: deploy-prometheus-cloud
        with:
          ingressClass: ${{ matrix.cluster.ingressClass }}
          hostName: ${{ matrix.cluster.grafana.hostName }}
          tenantId: ${{ needs.get-aks-clusters-to-configure.outputs.tenantId }}
          ServicePrincipalClientId: ${{ matrix.cluster.grafana.ServicePrincipalClientId }}
          SsoServicePrincipalClientSecret: ${{ secrets.AKS_SSO_CLOUD }}
          AdminAadGroupId: ${{ matrix.cluster.adminAadGroupId }}