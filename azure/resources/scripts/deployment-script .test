param name string
param filename string
param containerName string
param location string = az.resourceGroup().location
param storageName string
param resourceGroup string

resource storageAccount 'Microsoft.Storage/storageAccounts@2021-06-01' existing = {
  name: storageName
}

resource userAssignedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' existing = {
  name: userAssignedIdentityName

resource deploymentScript 'Microsoft.Resources/deploymentScripts@2020-10-01' = {
  name: name
  location: location
  kind: 'AzurePowerShell'
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: {
      '${userAssignedIdentity.id}': {}
    }
  }
  properties: {
       storageAccountSettings: {
      storageAccountName: storageName
      storageAccountKey: storageAccount.listKeys().keys[0].value
    }
    azPowerShellVersion: '9.7' 
    environmentVariables: [
      {
        name: 'resourceGroup'
        value: resourceGroup
      }
      {
        name: 'filename'
        value: filename
      }
    ]
    scriptContent: '''
$contentToAdd = @"
    # Ensures you do not inherit an AzContext in your runbook
    Disable-AzContextAutosave -Scope Process

    # Connect to Azure with system-assigned managed identity
    Connect-AzAccount -Identity -AccountId $($azadspn.appId)

    # delete resourcegroup
    Get-AzResourceGroup -Name $resourceGroup  | Remove-AzResourceGroup -ForceGet-AzUserAssignedIdentity
"@
      $DeploymentScriptOutputs = @{}
      $DeploymentScriptOutputs['text'] = $contentToAdd
    '''
    supportingScriptUris: []
    timeout: 'PT30M'
    cleanupPreference: 'OnSuccess'
    retentionInterval: 'P1D'
  }
}
